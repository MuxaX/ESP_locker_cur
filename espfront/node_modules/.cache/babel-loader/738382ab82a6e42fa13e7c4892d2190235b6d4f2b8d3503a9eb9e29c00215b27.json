{"ast":null,"code":"import EspData from \"../services/data_import\";\nexport default {\n  name: \"AccessLog\",\n  data() {\n    return {\n      logs: [],\n      loading: false,\n      error: null\n    };\n  },\n  computed: {\n    // Сортируем логи по дате (новые сверху)\n    sortedLogs() {\n      return [...this.logs].sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n    }\n  },\n  methods: {\n    // Форматируем дату и время\n    formatDateTime(dateString) {\n      const date = new Date(dateString);\n      return date.toLocaleString(\"ru-RU\", {\n        day: \"2-digit\",\n        month: \"2-digit\",\n        year: \"numeric\",\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        second: \"2-digit\"\n      });\n    },\n    // Преобразуем статус в читаемый текст\n    getStatusText(status) {\n      return status === \"Access Complete\" ? \"Доступ получен\" : \"Отказано в доступе\";\n    },\n    // Классы для статусов\n    statusClass(status) {\n      return {\n        \"status-success\": status === \"Access Complete\",\n        \"status-error\": status !== \"Access Complete\"\n      };\n    },\n    // Загрузка данных\n    async fetchLogs() {\n      this.loading = true;\n      this.error = null;\n      try {\n        const response = await EspData.getLog();\n        this.logs = response.data;\n      } catch (error) {\n        this.error = error.response?.data?.message || \"Ошибка при загрузке журнала доступа\";\n        console.error(\"Ошибка:\", error);\n      } finally {\n        this.loading = false;\n      }\n    }\n  },\n  mounted() {\n    this.fetchLogs();\n  }\n};","map":{"version":3,"names":["EspData","name","data","logs","loading","error","computed","sortedLogs","sort","a","b","Date","timestamp","methods","formatDateTime","dateString","date","toLocaleString","day","month","year","hour","minute","second","getStatusText","status","statusClass","fetchLogs","response","getLog","message","console","mounted"],"sources":["V:\\web\\ARDUINO\\espfront\\src\\components\\AccessLog.vue"],"sourcesContent":["<template>\r\n  <div class=\"access-logs\">\r\n    <h2>Журнал доступа к локерам</h2>\r\n\r\n    <!-- Таблица для отображения логов -->\r\n    <table class=\"table\">\r\n      <thead>\r\n        <tr>\r\n          <th>№ Локера</th>\r\n          <th>Ключ доступа</th>\r\n          <th>Статус</th>\r\n          <th>Дата и время</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"log in sortedLogs\" :key=\"log.id\">\r\n          <td>{{ log.reader || \"Не указан\" }}</td>\r\n          <td class=\"uid\">{{ log.uid.toUpperCase() }}</td>\r\n          <td :class=\"statusClass(log.status)\">\r\n            {{ getStatusText(log.status) }}\r\n          </td>\r\n          <td>{{ formatDateTime(log.timestamp) }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <!-- Сообщения о состоянии -->\r\n    <div v-if=\"loading\" class=\"alert alert-info\">Загрузка данных...</div>\r\n    <div v-if=\"error\" class=\"alert alert-danger\">{{ error }}</div>\r\n    <div v-if=\"!loading && logs.length === 0\" class=\"alert alert-warning\">\r\n      Нет данных для отображения\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport EspData from \"../services/data_import\";\r\n\r\nexport default {\r\n  name: \"AccessLog\",\r\n  data() {\r\n    return {\r\n      logs: [],\r\n      loading: false,\r\n      error: null,\r\n    };\r\n  },\r\n  computed: {\r\n    // Сортируем логи по дате (новые сверху)\r\n    sortedLogs() {\r\n      return [...this.logs].sort(\r\n        (a, b) => new Date(b.timestamp) - new Date(a.timestamp)\r\n      );\r\n    },\r\n  },\r\n  methods: {\r\n    // Форматируем дату и время\r\n    formatDateTime(dateString) {\r\n      const date = new Date(dateString);\r\n      return date.toLocaleString(\"ru-RU\", {\r\n        day: \"2-digit\",\r\n        month: \"2-digit\",\r\n        year: \"numeric\",\r\n        hour: \"2-digit\",\r\n        minute: \"2-digit\",\r\n        second: \"2-digit\",\r\n      });\r\n    },\r\n\r\n    // Преобразуем статус в читаемый текст\r\n    getStatusText(status) {\r\n      return status === \"Access Complete\"\r\n        ? \"Доступ получен\"\r\n        : \"Отказано в доступе\";\r\n    },\r\n\r\n    // Классы для статусов\r\n    statusClass(status) {\r\n      return {\r\n        \"status-success\": status === \"Access Complete\",\r\n        \"status-error\": status !== \"Access Complete\",\r\n      };\r\n    },\r\n\r\n    // Загрузка данных\r\n    async fetchLogs() {\r\n      this.loading = true;\r\n      this.error = null;\r\n\r\n      try {\r\n        const response = await EspData.getLog();\r\n        this.logs = response.data;\r\n      } catch (error) {\r\n        this.error =\r\n          error.response?.data?.message ||\r\n          \"Ошибка при загрузке журнала доступа\";\r\n        console.error(\"Ошибка:\", error);\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    this.fetchLogs();\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.access-logs {\r\n  max-width: 1000px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n}\r\n\r\nh2 {\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n  color: #333;\r\n}\r\n\r\n.table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  margin-top: 20px;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.table th {\r\n  background-color: #f5f5f5;\r\n  padding: 12px 15px;\r\n  text-align: left;\r\n  font-weight: 600;\r\n}\r\n\r\n.table td {\r\n  padding: 10px 15px;\r\n  border-bottom: 1px solid #eee;\r\n}\r\n\r\n.table tr:hover {\r\n  background-color: #f9f9f9;\r\n}\r\n\r\n.uid {\r\n  font-family: monospace;\r\n  letter-spacing: 1px;\r\n}\r\n\r\n.status-success {\r\n  color: #28a745;\r\n  font-weight: 500;\r\n}\r\n\r\n.status-error {\r\n  color: #dc3545;\r\n  font-weight: 500;\r\n}\r\n\r\n.alert {\r\n  padding: 15px;\r\n  margin-top: 20px;\r\n  border-radius: 4px;\r\n  text-align: center;\r\n}\r\n\r\n.alert-info {\r\n  background-color: #e7f5ff;\r\n  color: #1864ab;\r\n}\r\n\r\n.alert-danger {\r\n  background-color: #fff5f5;\r\n  color: #c92a2a;\r\n}\r\n\r\n.alert-warning {\r\n  background-color: #fff9db;\r\n  color: #e67700;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .table {\r\n    display: block;\r\n    overflow-x: auto;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"AAoCA,OAAOA,OAAM,MAAO,yBAAyB;AAE7C,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,EAAE;MACRC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACR;IACAC,UAAUA,CAAA,EAAG;MACX,OAAO,CAAC,GAAG,IAAI,CAACJ,IAAI,CAAC,CAACK,IAAI,CACxB,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACD,CAAC,CAACE,SAAS,IAAI,IAAID,IAAI,CAACF,CAAC,CAACG,SAAS,CACxD,CAAC;IACH;EACF,CAAC;EACDC,OAAO,EAAE;IACP;IACAC,cAAcA,CAACC,UAAU,EAAE;MACzB,MAAMC,IAAG,GAAI,IAAIL,IAAI,CAACI,UAAU,CAAC;MACjC,OAAOC,IAAI,CAACC,cAAc,CAAC,OAAO,EAAE;QAClCC,GAAG,EAAE,SAAS;QACdC,KAAK,EAAE,SAAS;QAChBC,IAAI,EAAE,SAAS;QACfC,IAAI,EAAE,SAAS;QACfC,MAAM,EAAE,SAAS;QACjBC,MAAM,EAAE;MACV,CAAC,CAAC;IACJ,CAAC;IAED;IACAC,aAAaA,CAACC,MAAM,EAAE;MACpB,OAAOA,MAAK,KAAM,iBAAgB,GAC9B,gBAAe,GACf,oBAAoB;IAC1B,CAAC;IAED;IACAC,WAAWA,CAACD,MAAM,EAAE;MAClB,OAAO;QACL,gBAAgB,EAAEA,MAAK,KAAM,iBAAiB;QAC9C,cAAc,EAAEA,MAAK,KAAM;MAC7B,CAAC;IACH,CAAC;IAED;IACA,MAAME,SAASA,CAAA,EAAG;MAChB,IAAI,CAACvB,OAAM,GAAI,IAAI;MACnB,IAAI,CAACC,KAAI,GAAI,IAAI;MAEjB,IAAI;QACF,MAAMuB,QAAO,GAAI,MAAM5B,OAAO,CAAC6B,MAAM,CAAC,CAAC;QACvC,IAAI,CAAC1B,IAAG,GAAIyB,QAAQ,CAAC1B,IAAI;MAC3B,EAAE,OAAOG,KAAK,EAAE;QACd,IAAI,CAACA,KAAI,GACPA,KAAK,CAACuB,QAAQ,EAAE1B,IAAI,EAAE4B,OAAM,IAC5B,qCAAqC;QACvCC,OAAO,CAAC1B,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;MACjC,UAAU;QACR,IAAI,CAACD,OAAM,GAAI,KAAK;MACtB;IACF;EACF,CAAC;EACD4B,OAAOA,CAAA,EAAG;IACR,IAAI,CAACL,SAAS,CAAC,CAAC;EAClB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}