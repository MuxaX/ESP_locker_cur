{"ast":null,"code":"import EspData from \"../services/data_import\";\nexport default {\n  name: \"AccessLog\",\n  data() {\n    return {\n      logs: [],\n      loading: false,\n      error: null\n    };\n  },\n  methods: {\n    // Метод для форматирования даты\n    formatDate(dateString) {\n      const options = {\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\",\n        hour: \"2-digit\",\n        minute: \"2-digit\"\n      };\n      return new Date(dateString).toLocaleDateString(undefined, options);\n    },\n    // Метод для загрузки данных\n    fetchLogs() {\n      this.loading = true;\n      this.error = null;\n      EspData.getLog().then(response => {\n        this.logs = response.data;\n      }).catch(error => {\n        this.error = error.message || \"Failed to fetch logs\";\n        console.error(\"Error fetching logs:\", error);\n      }).finally(() => {\n        this.loading = false;\n      });\n    }\n  },\n  // Загружаем данные при монтировании компонента\n  mounted() {\n    this.fetchLogs();\n  }\n};","map":{"version":3,"names":["EspData","name","data","logs","loading","error","methods","formatDate","dateString","options","year","month","day","hour","minute","Date","toLocaleDateString","undefined","fetchLogs","getLog","then","response","catch","message","console","finally","mounted"],"sources":["V:\\web\\ARDUINO\\espfront\\src\\components\\AccessLog.vue"],"sourcesContent":["<template>\r\n  <div class=\"access-logs\">\r\n    <h2>Access Logs</h2>\r\n\r\n    <!-- Таблица для отображения логов -->\r\n    <table class=\"table\">\r\n      <thead>\r\n        <tr>\r\n          <th>ID</th>\r\n          <th>UID</th>\r\n          <th>Status</th>\r\n          <th>Timestamp</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"log in logs\" :key=\"log.id\">\r\n          <td>{{ log.id }}</td>\r\n          <td>{{ log.uid }}</td>\r\n          <td>{{ log.status }}</td>\r\n          <td>{{ formatDate(log.timestamp) }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <!-- Сообщение о загрузке или ошибке -->\r\n    <div v-if=\"loading\" class=\"alert alert-info\">Loading...</div>\r\n    <div v-if=\"error\" class=\"alert alert-danger\">{{ error }}</div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport EspData from \"../services/data_import\";\r\n\r\nexport default {\r\n  name: \"AccessLog\",\r\n  data() {\r\n    return {\r\n      logs: [],\r\n      loading: false,\r\n      error: null,\r\n    };\r\n  },\r\n  methods: {\r\n    // Метод для форматирования даты\r\n    formatDate(dateString) {\r\n      const options = {\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        day: \"numeric\",\r\n        hour: \"2-digit\",\r\n        minute: \"2-digit\",\r\n      };\r\n      return new Date(dateString).toLocaleDateString(undefined, options);\r\n    },\r\n\r\n    // Метод для загрузки данных\r\n    fetchLogs() {\r\n      this.loading = true;\r\n      this.error = null;\r\n\r\n      EspData.getLog()\r\n        .then((response) => {\r\n          this.logs = response.data;\r\n        })\r\n        .catch((error) => {\r\n          this.error = error.message || \"Failed to fetch logs\";\r\n          console.error(\"Error fetching logs:\", error);\r\n        })\r\n        .finally(() => {\r\n          this.loading = false;\r\n        });\r\n    },\r\n  },\r\n  // Загружаем данные при монтировании компонента\r\n  mounted() {\r\n    this.fetchLogs();\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  margin-top: 20px;\r\n}\r\n\r\n.table th,\r\n.table td {\r\n  border: 1px solid #ddd;\r\n  padding: 8px;\r\n  text-align: left;\r\n}\r\n\r\n.table th {\r\n  background-color: #f2f2f2;\r\n}\r\n\r\n.alert {\r\n  padding: 15px;\r\n  margin-top: 20px;\r\n  border-radius: 4px;\r\n}\r\n\r\n.alert-info {\r\n  background-color: #d1ecf1;\r\n  color: #0c5460;\r\n}\r\n\r\n.alert-danger {\r\n  background-color: #f8d7da;\r\n  color: #721c24;\r\n}\r\n</style>\r\n"],"mappings":"AA+BA,OAAOA,OAAM,MAAO,yBAAyB;AAE7C,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,EAAE;MACRC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP;IACAC,UAAUA,CAACC,UAAU,EAAE;MACrB,MAAMC,OAAM,GAAI;QACdC,IAAI,EAAE,SAAS;QACfC,KAAK,EAAE,MAAM;QACbC,GAAG,EAAE,SAAS;QACdC,IAAI,EAAE,SAAS;QACfC,MAAM,EAAE;MACV,CAAC;MACD,OAAO,IAAIC,IAAI,CAACP,UAAU,CAAC,CAACQ,kBAAkB,CAACC,SAAS,EAAER,OAAO,CAAC;IACpE,CAAC;IAED;IACAS,SAASA,CAAA,EAAG;MACV,IAAI,CAACd,OAAM,GAAI,IAAI;MACnB,IAAI,CAACC,KAAI,GAAI,IAAI;MAEjBL,OAAO,CAACmB,MAAM,CAAC,EACZC,IAAI,CAAEC,QAAQ,IAAK;QAClB,IAAI,CAAClB,IAAG,GAAIkB,QAAQ,CAACnB,IAAI;MAC3B,CAAC,EACAoB,KAAK,CAAEjB,KAAK,IAAK;QAChB,IAAI,CAACA,KAAI,GAAIA,KAAK,CAACkB,OAAM,IAAK,sBAAsB;QACpDC,OAAO,CAACnB,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C,CAAC,EACAoB,OAAO,CAAC,MAAM;QACb,IAAI,CAACrB,OAAM,GAAI,KAAK;MACtB,CAAC,CAAC;IACN;EACF,CAAC;EACD;EACAsB,OAAOA,CAAA,EAAG;IACR,IAAI,CAACR,SAAS,CAAC,CAAC;EAClB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}