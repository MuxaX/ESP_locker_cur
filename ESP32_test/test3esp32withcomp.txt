#include <Arduino.h>
#include <SPI.h>
#include <MFRC522.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>

#define RST_PIN 22     // GPIO22 для RST RC522
#define SS_PIN 5       // GPIO5 для SDA RC522
#define BUZZER_PIN 15  // GPIO15 для зуммера
#define GREEN_LED_PIN 4   // GPIO4 для зеленого светодиода
#define RED_LED_PIN 2     // GPIO2 для красного светодиода

const char* ssid = "RT-GPON-9FB0";
const char* password = "piNSj7pbYs";
const char* serverUrl = "http://192.168.0.4:8000/api/access";

unsigned long ledTimer = 0;      // Время, когда светодиоды были включены
bool isLedActive = false;        // Флаг активности светодиодов
bool currentAccessStatus = false; // Текущий статус доступа (для светодиодов)

MFRC522 mfrc522(SS_PIN, RST_PIN);
byte myTagUID[] = {0xD1, 0xA6, 0xBB, 0x89};

void testServerConnection() {
  HTTPClient http;
  http.begin("http://192.168.43.207:8000");
  int httpCode = http.GET();
  Serial.printf("Тест подключения: %d\n", httpCode);
  http.end();
}

void setup() {
  Serial.begin(115200);
  SPI.begin();
  mfrc522.PCD_Init();
  pinMode(BUZZER_PIN, OUTPUT);
  digitalWrite(BUZZER_PIN, LOW);

  // Подключаемся к WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nПодключено к WiFi");
  testServerConnection();


  pinMode(GREEN_LED_PIN, OUTPUT);
  pinMode(RED_LED_PIN, OUTPUT);
  digitalWrite(GREEN_LED_PIN, LOW);
  digitalWrite(RED_LED_PIN, LOW);
}



void beep(int duration = 100) {
  digitalWrite(BUZZER_PIN, HIGH);
  delay(duration);
  digitalWrite(BUZZER_PIN, LOW);
}

void sendAccessRequest(bool isGranted, String uid) {
  WiFiClient client;
  HTTPClient http;
  
  if (!http.begin(client, serverUrl)) {
    Serial.println("Ошибка инициализации HTTP");
    return;
  }

  http.addHeader("Content-Type", "application/json");
  http.setTimeout(5000); // Таймаут 5 секунд

  DynamicJsonDocument doc(256);
  doc["status"] = isGranted ? "Access Complete" : "Access Denied";
  doc["uid"] = uid;

  String requestBody;
  serializeJson(doc, requestBody);

  Serial.print("Отправка: ");
  Serial.println(requestBody);

  int httpCode = http.POST(requestBody);
  
  if (httpCode > 0) {
    Serial.printf("Код: %d, Ответ: %s\n", httpCode, http.getString().c_str());
  } else {
    Serial.printf("Ошибка: %s\n", http.errorToString(httpCode).c_str());
  }
  
  http.end();
}

void loop() {
  // Если светодиоды активны и прошло 3 секунды — выключаем их
  if (isLedActive && (millis() - ledTimer >= 3000)) {
    digitalWrite(GREEN_LED_PIN, LOW);
    digitalWrite(RED_LED_PIN, LOW);
    isLedActive = false;
  }

  // Проверка RFID
  if (!mfrc522.PICC_IsNewCardPresent() || !mfrc522.PICC_ReadCardSerial()) {
    delay(50);
    return;
  }

  String uid = "";
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    uid += String(mfrc522.uid.uidByte[i], HEX);
  }

  Serial.print("UID метки: ");
  Serial.println(uid);

  bool accessGranted = true;
  for (byte i = 0; i < 4; i++) {
    if (mfrc522.uid.uidByte[i] != myTagUID[i]) {
      accessGranted = false;
      break;
    }
  }

  if (accessGranted) {
    Serial.println("Access Complete");
    digitalWrite(GREEN_LED_PIN, HIGH);
    digitalWrite(RED_LED_PIN, LOW);
    beep(200);
    delay(100);
    beep(200);
  } else {
    Serial.println("Access Denied");
    digitalWrite(RED_LED_PIN, HIGH);
    digitalWrite(GREEN_LED_PIN, LOW);
    beep(50);
    delay(50);
    beep(50);
    delay(50);
    beep(50);
  }

  // Запускаем таймер на 3 секунды
  isLedActive = true;
  ledTimer = millis();

  sendAccessRequest(accessGranted, uid);
  mfrc522.PICC_HaltA();
}